{"version":3,"sources":["Input.js","Button.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["Input","option","handleChange","type","сhecked","checked","value","name","onChange","disabled","Button","text","handleSubmit","onClick","Message","optionSubmitted","correct","correctOption","userChoice","message","style","display","color","border","className","App","props","getRandomEl","arr","Math","floor","random","length","shuffleArray","sort","checkAnswer","setState","handleContinue","countries","state","options","slice","document","getElementsByClassName","reset","undefined","e","target","inputs","flag","button","messageBlock","this","map","opt","index","key","src","alt","fetch","then","data","json","catch","console","warn","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ca7ca27.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nconst Input = ({ option, handleChange }) => (\n  <label>\n    <input\n      type=\"radio\"\n      сhecked={option.checked}\n      value={option.name}\n      name=\"country\"\n      onChange={handleChange}\n      disabled={option.disabled}\n    />\n    {option.name}\n  </label>\n);\nInput.propTypes = {\n  option: PropTypes.object,\n  handleChange: PropTypes.func\n};\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ text, handleSubmit, disabled }) => (\n  <button disabled={disabled} onClick={handleSubmit}>\n    {text}\n  </button>\n);\nButton.propTypes = {\n  text: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  disabled: PropTypes.bool\n};\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Message = ({ optionSubmitted, correct, correctOption, userChoice }) => {\n  const message = correct\n    ? `You're right. The flag's country is ${userChoice}`\n    : `Oops. Not right. The flag's country is ${correctOption.name}`;\n  const style = optionSubmitted\n    ? correct\n      ? { display: 'block', color: 'green', border: '2px solid green' }\n      : { display: 'block', color: 'red', border: '2px solid red' }\n    : { display: 'none' };\n  return (\n    <div className=\"message\" style={style}>\n      <p>{message}</p>\n    </div>\n  );\n};\nMessage.propTypes = {\n  correct: PropTypes.bool,\n  optionSubmitted: PropTypes.bool,\n  userChoice: PropTypes.string,\n  correctOption: PropTypes.object\n};\nexport default Message;\n","import React, { Component } from 'react';\nimport Input from './Input';\nimport Button from './Button';\nimport Message from './Message';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      options: [],\n      correctOption: undefined,\n      userChoice: undefined,\n      optionSubmitted: false\n    };\n  }\n  getRandomEl = arr => {\n    const r = Math.floor(Math.random() * arr.length);\n    return arr[r];\n  };\n\n  shuffleArray = arr => arr.sort(() => Math.random() - 0.5);\n\n  checkAnswer = () => {\n    this.setState({ optionSubmitted: true });\n  };\n\n  handleContinue = () => {\n    const { countries } = this.state;\n    const options = this.shuffleArray(countries).slice(0, 4);\n    const correctOption = this.getRandomEl(options);\n    const userChoice = undefined;\n    const optionSubmitted = false;\n    const form = document.getElementsByClassName('inputGroup')[0];\n    form.reset();\n    this.setState({\n      options,\n      correctOption,\n      userChoice,\n      optionSubmitted\n    });\n  };\n\n  handleChange = e => {\n    this.setState({ userChoice: e.target.value });\n  };\n\n  render() {\n    const { options, userChoice, correctOption, optionSubmitted } = this.state;\n    let inputs, flag, button, messageBlock;\n    if (correctOption !== undefined) {\n      let opts = options.map(opt => ({\n        ...opt,\n        checked: userChoice === opt.name,\n        disabled: optionSubmitted\n      }));\n      inputs = opts.map((option, index) => (\n        <Input key={index} option={option} handleChange={this.handleChange} />\n      ));\n      button = (\n        <Button\n          handleSubmit={\n            optionSubmitted ? this.handleContinue : this.checkAnswer\n          }\n          text={optionSubmitted ? 'Continue' : 'Guess'}\n          disabled={!userChoice}\n        />\n      );\n      messageBlock = (\n        <Message\n          optionSubmitted={optionSubmitted}\n          correct={userChoice === correctOption.name}\n          correctOption={correctOption}\n          userChoice={userChoice}\n        />\n      );\n      flag = <img src={correctOption.flag} alt={correctOption.name} />;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Guess the right country for a flag</h2>\n        </header>\n        <div className=\"App-content\">\n          <form className=\"inputGroup\">{inputs}</form>\n          <div>\n            {button}\n            {messageBlock}\n          </div>\n          <div className=\"flag\">{flag}</div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const countriesData = 'https://restcountries.eu/rest/v2/all';\n    fetch(countriesData)\n      .then(data => data.json())\n      .then(countries => {\n        const options = this.shuffleArray(countries).slice(0, 4);\n        const correctOption = this.getRandomEl(options);\n        this.setState({ countries, options, correctOption });\n      })\n      .catch(console.warn);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}